/*
Copyright 2016 Jalian Systems Pvt. Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    pomFile = file("${project.buildDir}/generated-pom.xml")
    isReleaseVersion = Boolean.getBoolean("maven.release");
}

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.json:json:20180813'
  compile project(":marathon-java:marathon-java-agent")
  compile project(":marathon-javafx:marathon-javafx-agent")
  compile "org.nanohttpd:nanohttpd:${nanohttpd_version}"
  compile "org.seleniumhq.selenium:selenium-java:${selenium_java_version}"
  testCompile "org.testng:testng:${testng_version}"
  testCompile project(":marathon-java:marathon-test-helpers")
}

task packageJavadoc(type: Jar, dependsOn: javadoc) {
    from javadoc
    classifier = 'javadoc'
}

signing {
    required { signatory != null }
	sign configurations.archives
}

publishing.repositories {
      maven {
          if (project.ext.isReleaseVersion) {
              url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
          } else {
              url 'https://oss.sonatype.org/content/repositories/snapshots/'
          }
  
          credentials {
              username = mvnUser
              password = mvnPassword
          }
      }
}

publishing.publications {
  mavenJava(MavenPublication) {
      artifactId = 'marathon-java-driver'

      from components.java

      artifact sourceJar
      artifact packageJavadoc
      // Sign the pom.xml and artifacts.
      if (signing.required) {
          // Sign the pom.xml.
          pom.withXml {
              writeTo(project.ext.pomFile)
              def pomAscFile = signing.sign(project.ext.pomFile).signatureFiles[0]
              artifact(pomAscFile) {
                  classifier = null
                  extension = 'pom.asc'
              }
              project.ext.pomFile.delete()
          }
      
          // Sign the artifacts.
          project.tasks.signArchives.signatureFiles.each {
              artifact(it) {
                  def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                  if (matcher.find()) {
                      classifier = matcher.group(1)
                  } else {
                      classifier = null
                  }
                  extension = 'jar.asc'
              }
          }
      }
  }
}

test {
  useTestNG()
  systemProperty 'file.encoding', 'utf8'
  systemProperty 'marathon.agent.file', project(":marathon-java:marathon-java-agent").tasks.jar.archivePath
  systemProperty 'marathon.recorder.file', project(":marathon-java:marathon-java-recorder").tasks.jar.archivePath
  systemProperty 'applet.html', project(":marathon-java:marathon-test-helpers").file("swingset3/applet.html").path
  systemProperty 'SwingSet3.jnlp', project(":marathon-java:marathon-test-helpers").file("swingset3/SwingSet3.jnlp").path
}
